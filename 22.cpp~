#include <iostream>
#include <stack>
#include <vector>
#include <string>

using namespace std;


void dfs(vector<string> &ans, stack<char> &symbolStack, string res, int leftNum, int rightNum, int n) {
  if (leftNum == n && rightNum == n) {
    ans.push_back(res);
  } else if (leftNum < n && rightNum < n) {
    symbolStack.push('(');
    dfs(ans, symbolStack, res+'(', leftNum+1, rightNum, n);
    if (symbolStack.size()) {
      symbolStack.pop();
      dfs(ans, symbolStack, res+')', leftNum, rightNum+1, n);
    }
  } else if(leftNum == n && rightNum < n) {
     if (symbolStack.size()) {
      symbolStack.pop();
      dfs(ans, symbolStack, res+')', leftNum, rightNum+1, n);
    }
  }
}


vector<string> generateParenthesis(int n) {
  vector<string> ans;
  stack<char> symbolStack;
  symbolStack.push('(');
  dfs(ans, symbolStack, "(", 1, 0, n);

  return ans;
}


int main(int argc, char *argv[])
{
  vector<string> ans = generateParenthesis(3);
  for (int i = 0; i < ans.size(); i++) {
    std::cout << ans[i] << std::endl;
  }

  return 0;
}

